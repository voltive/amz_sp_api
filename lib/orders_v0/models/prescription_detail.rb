=begin
#Selling Partner API for Orders

#Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).

OpenAPI spec version: v0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

require 'date'

module AmzSpApi::OrdersV0
  # Information about the prescription that is used to verify a regulated product. This must be provided once per order and reflect the sellerâ€™s own records. Only approved orders can have prescriptions.
  class PrescriptionDetail
    # The identifier for the prescription used to verify the regulated product.
    attr_accessor :prescription_id

    # The expiration date of the prescription used to verify the regulated product, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
    attr_accessor :expiration_date

    # The number of units in each fill as provided in the prescription.
    attr_accessor :written_quantity

    # The total number of refills written in the original prescription used to verify the regulated product. If a prescription originally had no refills, this value must be 0.
    attr_accessor :total_refills_authorized

    # The number of refills remaining for the prescription used to verify the regulated product. If a prescription originally had 10 total refills, this value must be `10` for the first order, `9` for the second order, and `0` for the eleventh order. If a prescription originally had no refills, this value must be 0.
    attr_accessor :refills_remaining

    # The identifier for the clinic which provided the prescription used to verify the regulated product.
    attr_accessor :clinic_id

    # The instructions for the prescription as provided by the approver of the regulated product.
    attr_accessor :usage_instructions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'prescription_id' => :'prescriptionId',
        :'expiration_date' => :'expirationDate',
        :'written_quantity' => :'writtenQuantity',
        :'total_refills_authorized' => :'totalRefillsAuthorized',
        :'refills_remaining' => :'refillsRemaining',
        :'clinic_id' => :'clinicId',
        :'usage_instructions' => :'usageInstructions'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'prescription_id' => :'Object',
        :'expiration_date' => :'Object',
        :'written_quantity' => :'Object',
        :'total_refills_authorized' => :'Object',
        :'refills_remaining' => :'Object',
        :'clinic_id' => :'Object',
        :'usage_instructions' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `AmzSpApi::OrdersV0::PrescriptionDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `AmzSpApi::OrdersV0::PrescriptionDetail`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'prescription_id')
        self.prescription_id = attributes[:'prescription_id']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'written_quantity')
        self.written_quantity = attributes[:'written_quantity']
      end

      if attributes.key?(:'total_refills_authorized')
        self.total_refills_authorized = attributes[:'total_refills_authorized']
      end

      if attributes.key?(:'refills_remaining')
        self.refills_remaining = attributes[:'refills_remaining']
      end

      if attributes.key?(:'clinic_id')
        self.clinic_id = attributes[:'clinic_id']
      end

      if attributes.key?(:'usage_instructions')
        self.usage_instructions = attributes[:'usage_instructions']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @prescription_id.nil?
        invalid_properties.push('invalid value for "prescription_id", prescription_id cannot be nil.')
      end

      if @expiration_date.nil?
        invalid_properties.push('invalid value for "expiration_date", expiration_date cannot be nil.')
      end

      if @written_quantity.nil?
        invalid_properties.push('invalid value for "written_quantity", written_quantity cannot be nil.')
      end

      if @total_refills_authorized.nil?
        invalid_properties.push('invalid value for "total_refills_authorized", total_refills_authorized cannot be nil.')
      end

      if @refills_remaining.nil?
        invalid_properties.push('invalid value for "refills_remaining", refills_remaining cannot be nil.')
      end

      if @clinic_id.nil?
        invalid_properties.push('invalid value for "clinic_id", clinic_id cannot be nil.')
      end

      if @usage_instructions.nil?
        invalid_properties.push('invalid value for "usage_instructions", usage_instructions cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @prescription_id.nil?
      return false if @expiration_date.nil?
      return false if @written_quantity.nil?
      return false if @total_refills_authorized.nil?
      return false if @refills_remaining.nil?
      return false if @clinic_id.nil?
      return false if @usage_instructions.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          prescription_id == o.prescription_id &&
          expiration_date == o.expiration_date &&
          written_quantity == o.written_quantity &&
          total_refills_authorized == o.total_refills_authorized &&
          refills_remaining == o.refills_remaining &&
          clinic_id == o.clinic_id &&
          usage_instructions == o.usage_instructions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [prescription_id, expiration_date, written_quantity, total_refills_authorized, refills_remaining, clinic_id, usage_instructions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        AmzSpApi::OrdersV0.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
