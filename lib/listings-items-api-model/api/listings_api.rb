=begin
#Selling Partner API for Listings Items

#The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).

OpenAPI spec version: 2021-08-01

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

module AmzSpApi::ListingsItemsApiModel
  class ListingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param seller_id A selling partner identifier, such as a merchant account or vendor code.
    # @param sku A selling partner provided identifier for an Amazon listing.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :issue_locale A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale.
    # @return [ListingsItemSubmissionResponse]
    def delete_listings_item(seller_id, sku, marketplace_ids, opts = {})
      data, _status_code, _headers = delete_listings_item_with_http_info(seller_id, sku, marketplace_ids, opts)
      data
    end

    # Delete a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param seller_id A selling partner identifier, such as a merchant account or vendor code.
    # @param sku A selling partner provided identifier for an Amazon listing.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :issue_locale A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale.
    # @return [Array<(ListingsItemSubmissionResponse, Integer, Hash)>] ListingsItemSubmissionResponse data, response status code and response headers
    def delete_listings_item_with_http_info(seller_id, sku, marketplace_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.delete_listings_item ...'
      end
      # verify the required parameter 'seller_id' is set
      if @api_client.config.client_side_validation && seller_id.nil?
        fail ArgumentError, "Missing the required parameter 'seller_id' when calling ListingsApi.delete_listings_item"
      end
      # verify the required parameter 'sku' is set
      if @api_client.config.client_side_validation && sku.nil?
        fail ArgumentError, "Missing the required parameter 'sku' when calling ListingsApi.delete_listings_item"
      end
      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ListingsApi.delete_listings_item"
      end
      # resource path
      local_var_path = '/listings/2021-08-01/items/{sellerId}/{sku}'.sub('{' + 'sellerId' + '}', seller_id.to_s).sub('{' + 'sku' + '}', sku.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
      query_params[:'issueLocale'] = opts[:'issue_locale'] if !opts[:'issue_locale'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListingsItemSubmissionResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#delete_listings_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param seller_id A selling partner identifier, such as a merchant account or vendor code.
    # @param sku A selling partner provided identifier for an Amazon listing.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :issue_locale A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale.
    # @option opts [Array<String>] :included_data A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;.
    # @return [Item]
    def get_listings_item(seller_id, sku, marketplace_ids, opts = {})
      data, _status_code, _headers = get_listings_item_with_http_info(seller_id, sku, marketplace_ids, opts)
      data
    end

    # Returns details about a listings item for a selling partner.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param seller_id A selling partner identifier, such as a merchant account or vendor code.
    # @param sku A selling partner provided identifier for an Amazon listing.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :issue_locale A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale.
    # @option opts [Array<String>] :included_data A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;.
    # @return [Array<(Item, Integer, Hash)>] Item data, response status code and response headers
    def get_listings_item_with_http_info(seller_id, sku, marketplace_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.get_listings_item ...'
      end
      # verify the required parameter 'seller_id' is set
      if @api_client.config.client_side_validation && seller_id.nil?
        fail ArgumentError, "Missing the required parameter 'seller_id' when calling ListingsApi.get_listings_item"
      end
      # verify the required parameter 'sku' is set
      if @api_client.config.client_side_validation && sku.nil?
        fail ArgumentError, "Missing the required parameter 'sku' when calling ListingsApi.get_listings_item"
      end
      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ListingsApi.get_listings_item"
      end
      if @api_client.config.client_side_validation && opts[:'included_data'] && !opts[:'included_data'].all? { |item| ['summaries', 'attributes', 'issues', 'offers', 'fulfillmentAvailability', 'procurement', 'relationships', 'productTypes'].include?(item) }
        fail ArgumentError, 'invalid value for "included_data", must include one of summaries, attributes, issues, offers, fulfillmentAvailability, procurement, relationships, productTypes'
      end
      # resource path
      local_var_path = '/listings/2021-08-01/items/{sellerId}/{sku}'.sub('{' + 'sellerId' + '}', seller_id.to_s).sub('{' + 'sku' + '}', sku.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
      query_params[:'issueLocale'] = opts[:'issue_locale'] if !opts[:'issue_locale'].nil?
      query_params[:'includedData'] = @api_client.build_collection_param(opts[:'included_data'], :csv) if !opts[:'included_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Item' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#get_listings_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput can receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
    # @param body The request body schema for the &#x60;patchListingsItem&#x60; operation.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param seller_id A selling partner identifier, such as a merchant account or vendor code.
    # @param sku A selling partner provided identifier for an Amazon listing.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :included_data A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;.
    # @option opts [String] :mode The mode of operation for the request.
    # @option opts [String] :issue_locale A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale.
    # @return [ListingsItemSubmissionResponse]
    def patch_listings_item(body, marketplace_ids, seller_id, sku, opts = {})
      data, _status_code, _headers = patch_listings_item_with_http_info(body, marketplace_ids, seller_id, sku, opts)
      data
    end

    # Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput can receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
    # @param body The request body schema for the &#x60;patchListingsItem&#x60; operation.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param seller_id A selling partner identifier, such as a merchant account or vendor code.
    # @param sku A selling partner provided identifier for an Amazon listing.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :included_data A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;.
    # @option opts [String] :mode The mode of operation for the request.
    # @option opts [String] :issue_locale A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale.
    # @return [Array<(ListingsItemSubmissionResponse, Integer, Hash)>] ListingsItemSubmissionResponse data, response status code and response headers
    def patch_listings_item_with_http_info(body, marketplace_ids, seller_id, sku, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.patch_listings_item ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ListingsApi.patch_listings_item"
      end
      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ListingsApi.patch_listings_item"
      end
      # verify the required parameter 'seller_id' is set
      if @api_client.config.client_side_validation && seller_id.nil?
        fail ArgumentError, "Missing the required parameter 'seller_id' when calling ListingsApi.patch_listings_item"
      end
      # verify the required parameter 'sku' is set
      if @api_client.config.client_side_validation && sku.nil?
        fail ArgumentError, "Missing the required parameter 'sku' when calling ListingsApi.patch_listings_item"
      end
      if @api_client.config.client_side_validation && opts[:'included_data'] && !opts[:'included_data'].all? { |item| ['identifiers', 'issues'].include?(item) }
        fail ArgumentError, 'invalid value for "included_data", must include one of identifiers, issues'
      end
      if @api_client.config.client_side_validation && opts[:'mode'] && !['VALIDATION_PREVIEW'].include?(opts[:'mode'])
        fail ArgumentError, 'invalid value for "mode", must be one of VALIDATION_PREVIEW'
      end
      # resource path
      local_var_path = '/listings/2021-08-01/items/{sellerId}/{sku}'.sub('{' + 'sellerId' + '}', seller_id.to_s).sub('{' + 'sku' + '}', sku.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
      query_params[:'includedData'] = @api_client.build_collection_param(opts[:'included_data'], :csv) if !opts[:'included_data'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'issueLocale'] = opts[:'issue_locale'] if !opts[:'issue_locale'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ListingsItemSubmissionResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#patch_listings_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when `mode` is `VALIDATION_PREVIEW`.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The request body schema for the &#x60;putListingsItem&#x60; operation.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param seller_id A selling partner identifier, such as a merchant account or vendor code.
    # @param sku A selling partner provided identifier for an Amazon listing.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :included_data A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;.
    # @option opts [String] :mode The mode of operation for the request.
    # @option opts [String] :issue_locale A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale.
    # @return [ListingsItemSubmissionResponse]
    def put_listings_item(body, marketplace_ids, seller_id, sku, opts = {})
      data, _status_code, _headers = put_listings_item_with_http_info(body, marketplace_ids, seller_id, sku, opts)
      data
    end

    # Creates or fully updates an existing listings item for a selling partner.  **Note:** This operation has a throttling rate of one request per second when &#x60;mode&#x60; is &#x60;VALIDATION_PREVIEW&#x60;.  **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The request body schema for the &#x60;putListingsItem&#x60; operation.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param seller_id A selling partner identifier, such as a merchant account or vendor code.
    # @param sku A selling partner provided identifier for an Amazon listing.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :included_data A comma-delimited list of data sets to include in the response. Default: &#x60;issues&#x60;.
    # @option opts [String] :mode The mode of operation for the request.
    # @option opts [String] :issue_locale A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: &#x60;en_US&#x60;, &#x60;fr_CA&#x60;, &#x60;fr_FR&#x60;. Localized messages default to &#x60;en_US&#x60; when a localization is not available in the specified locale.
    # @return [Array<(ListingsItemSubmissionResponse, Integer, Hash)>] ListingsItemSubmissionResponse data, response status code and response headers
    def put_listings_item_with_http_info(body, marketplace_ids, seller_id, sku, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.put_listings_item ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ListingsApi.put_listings_item"
      end
      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ListingsApi.put_listings_item"
      end
      # verify the required parameter 'seller_id' is set
      if @api_client.config.client_side_validation && seller_id.nil?
        fail ArgumentError, "Missing the required parameter 'seller_id' when calling ListingsApi.put_listings_item"
      end
      # verify the required parameter 'sku' is set
      if @api_client.config.client_side_validation && sku.nil?
        fail ArgumentError, "Missing the required parameter 'sku' when calling ListingsApi.put_listings_item"
      end
      if @api_client.config.client_side_validation && opts[:'included_data'] && !opts[:'included_data'].all? { |item| ['identifiers', 'issues'].include?(item) }
        fail ArgumentError, 'invalid value for "included_data", must include one of identifiers, issues'
      end
      if @api_client.config.client_side_validation && opts[:'mode'] && !['VALIDATION_PREVIEW'].include?(opts[:'mode'])
        fail ArgumentError, 'invalid value for "mode", must be one of VALIDATION_PREVIEW'
      end
      # resource path
      local_var_path = '/listings/2021-08-01/items/{sellerId}/{sku}'.sub('{' + 'sellerId' + '}', seller_id.to_s).sub('{' + 'sku' + '}', sku.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
      query_params[:'includedData'] = @api_client.build_collection_param(opts[:'included_data'], :csv) if !opts[:'included_data'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      query_params[:'issueLocale'] = opts[:'issue_locale'] if !opts[:'issue_locale'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ListingsItemSubmissionResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#put_listings_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search for and return a list of selling partner listings items and their respective details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param seller_id A selling partner identifier, such as a merchant account or vendor code.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :issue_locale A locale that is used to localize issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. When a localization is not available in the specified locale, localized messages default to \&quot;en_US\&quot;.
    # @option opts [Array<String>] :included_data A comma-delimited list of datasets that you want to include in the response. Default: &#x60;summaries&#x60;.
    # @option opts [Array<String>] :identifiers A comma-delimited list of product identifiers that you can use to search for listings items.   **Note**:  1. This is required when you specify &#x60;identifiersType&#x60;. 2. You cannot use &#x27;identifiers&#x27; if you specify &#x60;variationParentSku&#x60; or &#x60;packageHierarchySku&#x60;.
    # @option opts [String] :identifiers_type A type of product identifiers that you can use to search for listings items.   **Note**:  This is required when &#x60;identifiers&#x60; is provided.
    # @option opts [String] :variation_parent_sku Filters results to include listing items that are variation children of the specified SKU.   **Note**: You cannot use &#x60;variationParentSku&#x60; if you include &#x60;identifiers&#x60; or &#x60;packageHierarchySku&#x60; in your request.
    # @option opts [String] :package_hierarchy_sku Filter results to include listing items that contain or are contained by the specified SKU.   **Note**: You cannot use &#x60;packageHierarchySku&#x60; if you include &#x60;identifiers&#x60; or &#x60;variationParentSku&#x60; in your request.
    # @option opts [DateTime] :created_after A date-time that is used to filter listing items. The response includes listings items that were created at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
    # @option opts [DateTime] :created_before A date-time that is used to filter listing items. The response includes listings items that were created at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
    # @option opts [DateTime] :last_updated_after A date-time that is used to filter listing items. The response includes listings items that were last updated at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
    # @option opts [DateTime] :last_updated_before A date-time that is used to filter listing items. The response includes listings items that were last updated at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
    # @option opts [Array<String>] :with_issue_severity Filter results to include only listing items that have issues that match one or more of the specified severity levels.
    # @option opts [Array<String>] :with_status Filter results to include only listing items that have the specified status.
    # @option opts [Array<String>] :without_status Filter results to include only listing items that don&#x27;t contain the specified statuses.
    # @option opts [String] :sort_by An attribute by which to sort the returned listing items. (default to lastUpdatedDate)
    # @option opts [String] :sort_order The order in which to sort the result items. (default to DESC)
    # @option opts [Integer] :page_size The number of results that you want to include on each page. (default to 10)
    # @option opts [String] :page_token A token that you can use to fetch a specific page when there are multiple pages of results.
    # @return [ItemSearchResults]
    def search_listings_items(seller_id, marketplace_ids, opts = {})
      data, _status_code, _headers = search_listings_items_with_http_info(seller_id, marketplace_ids, opts)
      data
    end

    # Search for and return a list of selling partner listings items and their respective details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that are applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param seller_id A selling partner identifier, such as a merchant account or vendor code.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :issue_locale A locale that is used to localize issues. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. When a localization is not available in the specified locale, localized messages default to \&quot;en_US\&quot;.
    # @option opts [Array<String>] :included_data A comma-delimited list of datasets that you want to include in the response. Default: &#x60;summaries&#x60;.
    # @option opts [Array<String>] :identifiers A comma-delimited list of product identifiers that you can use to search for listings items.   **Note**:  1. This is required when you specify &#x60;identifiersType&#x60;. 2. You cannot use &#x27;identifiers&#x27; if you specify &#x60;variationParentSku&#x60; or &#x60;packageHierarchySku&#x60;.
    # @option opts [String] :identifiers_type A type of product identifiers that you can use to search for listings items.   **Note**:  This is required when &#x60;identifiers&#x60; is provided.
    # @option opts [String] :variation_parent_sku Filters results to include listing items that are variation children of the specified SKU.   **Note**: You cannot use &#x60;variationParentSku&#x60; if you include &#x60;identifiers&#x60; or &#x60;packageHierarchySku&#x60; in your request.
    # @option opts [String] :package_hierarchy_sku Filter results to include listing items that contain or are contained by the specified SKU.   **Note**: You cannot use &#x60;packageHierarchySku&#x60; if you include &#x60;identifiers&#x60; or &#x60;variationParentSku&#x60; in your request.
    # @option opts [DateTime] :created_after A date-time that is used to filter listing items. The response includes listings items that were created at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
    # @option opts [DateTime] :created_before A date-time that is used to filter listing items. The response includes listings items that were created at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
    # @option opts [DateTime] :last_updated_after A date-time that is used to filter listing items. The response includes listings items that were last updated at or after this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
    # @option opts [DateTime] :last_updated_before A date-time that is used to filter listing items. The response includes listings items that were last updated at or before this time. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
    # @option opts [Array<String>] :with_issue_severity Filter results to include only listing items that have issues that match one or more of the specified severity levels.
    # @option opts [Array<String>] :with_status Filter results to include only listing items that have the specified status.
    # @option opts [Array<String>] :without_status Filter results to include only listing items that don&#x27;t contain the specified statuses.
    # @option opts [String] :sort_by An attribute by which to sort the returned listing items.
    # @option opts [String] :sort_order The order in which to sort the result items.
    # @option opts [Integer] :page_size The number of results that you want to include on each page.
    # @option opts [String] :page_token A token that you can use to fetch a specific page when there are multiple pages of results.
    # @return [Array<(ItemSearchResults, Integer, Hash)>] ItemSearchResults data, response status code and response headers
    def search_listings_items_with_http_info(seller_id, marketplace_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.search_listings_items ...'
      end
      # verify the required parameter 'seller_id' is set
      if @api_client.config.client_side_validation && seller_id.nil?
        fail ArgumentError, "Missing the required parameter 'seller_id' when calling ListingsApi.search_listings_items"
      end
      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ListingsApi.search_listings_items"
      end
      if @api_client.config.client_side_validation && opts[:'included_data'] && !opts[:'included_data'].all? { |item| ['summaries', 'attributes', 'issues', 'offers', 'fulfillmentAvailability', 'procurement', 'relationships', 'productTypes'].include?(item) }
        fail ArgumentError, 'invalid value for "included_data", must include one of summaries, attributes, issues, offers, fulfillmentAvailability, procurement, relationships, productTypes'
      end
      if @api_client.config.client_side_validation && opts[:'identifiers_type'] && !['ASIN', 'EAN', 'FNSKU', 'GTIN', 'ISBN', 'JAN', 'MINSAN', 'SKU', 'UPC'].include?(opts[:'identifiers_type'])
        fail ArgumentError, 'invalid value for "identifiers_type", must be one of ASIN, EAN, FNSKU, GTIN, ISBN, JAN, MINSAN, SKU, UPC'
      end
      if @api_client.config.client_side_validation && opts[:'with_issue_severity'] && !opts[:'with_issue_severity'].all? { |item| ['WARNING', 'ERROR'].include?(item) }
        fail ArgumentError, 'invalid value for "with_issue_severity", must include one of WARNING, ERROR'
      end
      if @api_client.config.client_side_validation && opts[:'with_status'] && !opts[:'with_status'].all? { |item| ['BUYABLE', 'DISCOVERABLE'].include?(item) }
        fail ArgumentError, 'invalid value for "with_status", must include one of BUYABLE, DISCOVERABLE'
      end
      if @api_client.config.client_side_validation && opts[:'without_status'] && !opts[:'without_status'].all? { |item| ['BUYABLE', 'DISCOVERABLE'].include?(item) }
        fail ArgumentError, 'invalid value for "without_status", must include one of BUYABLE, DISCOVERABLE'
      end
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !['sku', 'createdDate', 'lastUpdatedDate'].include?(opts[:'sort_by'])
        fail ArgumentError, 'invalid value for "sort_by", must be one of sku, createdDate, lastUpdatedDate'
      end
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !['ASC', 'DESC'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = '/listings/2021-08-01/items/{sellerId}'.sub('{' + 'sellerId' + '}', seller_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
      query_params[:'issueLocale'] = opts[:'issue_locale'] if !opts[:'issue_locale'].nil?
      query_params[:'includedData'] = @api_client.build_collection_param(opts[:'included_data'], :csv) if !opts[:'included_data'].nil?
      query_params[:'identifiers'] = @api_client.build_collection_param(opts[:'identifiers'], :csv) if !opts[:'identifiers'].nil?
      query_params[:'identifiersType'] = opts[:'identifiers_type'] if !opts[:'identifiers_type'].nil?
      query_params[:'variationParentSku'] = opts[:'variation_parent_sku'] if !opts[:'variation_parent_sku'].nil?
      query_params[:'packageHierarchySku'] = opts[:'package_hierarchy_sku'] if !opts[:'package_hierarchy_sku'].nil?
      query_params[:'createdAfter'] = opts[:'created_after'] if !opts[:'created_after'].nil?
      query_params[:'createdBefore'] = opts[:'created_before'] if !opts[:'created_before'].nil?
      query_params[:'lastUpdatedAfter'] = opts[:'last_updated_after'] if !opts[:'last_updated_after'].nil?
      query_params[:'lastUpdatedBefore'] = opts[:'last_updated_before'] if !opts[:'last_updated_before'].nil?
      query_params[:'withIssueSeverity'] = @api_client.build_collection_param(opts[:'with_issue_severity'], :csv) if !opts[:'with_issue_severity'].nil?
      query_params[:'withStatus'] = @api_client.build_collection_param(opts[:'with_status'], :csv) if !opts[:'with_status'].nil?
      query_params[:'withoutStatus'] = @api_client.build_collection_param(opts[:'without_status'], :csv) if !opts[:'without_status'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ItemSearchResults' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#search_listings_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
