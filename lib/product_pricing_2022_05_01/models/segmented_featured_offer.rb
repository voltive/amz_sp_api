=begin
#Selling Partner API for Pricing

#The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer pricing information for Amazon Marketplace products.  For more information, refer to the [Product Pricing v2022-05-01 Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/product-pricing-api-v2022-05-01-use-case-guide).

OpenAPI spec version: 2022-05-01

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

require 'date'

module AmzSpApi::ProductPricing20220501
  # A product offer with segment information indicating where it's featured.
  class SegmentedFeaturedOffer
    # The list of segment information in which the offer is featured.
    attr_accessor :featured_offer_segments

    # The seller identifier for the offer.
    attr_accessor :seller_id

    attr_accessor :condition

    # The item subcondition of the offer.
    attr_accessor :sub_condition

    attr_accessor :fulfillment_type

    attr_accessor :listing_price

    # A list of shipping options associated with this offer
    attr_accessor :shipping_options

    attr_accessor :points

    attr_accessor :prime_details

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'featured_offer_segments' => :'featuredOfferSegments',
        :'seller_id' => :'sellerId',
        :'condition' => :'condition',
        :'sub_condition' => :'subCondition',
        :'fulfillment_type' => :'fulfillmentType',
        :'listing_price' => :'listingPrice',
        :'shipping_options' => :'shippingOptions',
        :'points' => :'points',
        :'prime_details' => :'primeDetails'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'featured_offer_segments' => :'',
        :'seller_id' => :'',
        :'condition' => :'',
        :'sub_condition' => :'',
        :'fulfillment_type' => :'',
        :'listing_price' => :'',
        :'shipping_options' => :'',
        :'points' => :'',
        :'prime_details' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `AmzSpApi::ProductPricing20220501::SegmentedFeaturedOffer` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `AmzSpApi::ProductPricing20220501::SegmentedFeaturedOffer`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'featured_offer_segments')
        if (value = attributes[:'featured_offer_segments']).is_a?(Array)
          self.featured_offer_segments = value
        end
      end

      if attributes.key?(:'seller_id')
        self.seller_id = attributes[:'seller_id']
      end

      if attributes.key?(:'condition')
        self.condition = attributes[:'condition']
      end

      if attributes.key?(:'sub_condition')
        self.sub_condition = attributes[:'sub_condition']
      end

      if attributes.key?(:'fulfillment_type')
        self.fulfillment_type = attributes[:'fulfillment_type']
      end

      if attributes.key?(:'listing_price')
        self.listing_price = attributes[:'listing_price']
      end

      if attributes.key?(:'shipping_options')
        if (value = attributes[:'shipping_options']).is_a?(Array)
          self.shipping_options = value
        end
      end

      if attributes.key?(:'points')
        self.points = attributes[:'points']
      end

      if attributes.key?(:'prime_details')
        self.prime_details = attributes[:'prime_details']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @featured_offer_segments.nil?
        invalid_properties.push('invalid value for "featured_offer_segments", featured_offer_segments cannot be nil.')
      end

      if @seller_id.nil?
        invalid_properties.push('invalid value for "seller_id", seller_id cannot be nil.')
      end

      if @condition.nil?
        invalid_properties.push('invalid value for "condition", condition cannot be nil.')
      end

      if @fulfillment_type.nil?
        invalid_properties.push('invalid value for "fulfillment_type", fulfillment_type cannot be nil.')
      end

      if @listing_price.nil?
        invalid_properties.push('invalid value for "listing_price", listing_price cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @featured_offer_segments.nil?
      return false if @seller_id.nil?
      return false if @condition.nil?
      sub_condition_validator = EnumAttributeValidator.new('', ['New', 'Mint', 'VeryGood', 'Good', 'Acceptable', 'Poor', 'Club', 'OEM', 'Warranty', 'RefurbishedWarranty', 'Refurbished', 'OpenBox', 'Other'])
      return false unless sub_condition_validator.valid?(@sub_condition)
      return false if @fulfillment_type.nil?
      return false if @listing_price.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sub_condition Object to be assigned
    def sub_condition=(sub_condition)
      validator = EnumAttributeValidator.new('', ['New', 'Mint', 'VeryGood', 'Good', 'Acceptable', 'Poor', 'Club', 'OEM', 'Warranty', 'RefurbishedWarranty', 'Refurbished', 'OpenBox', 'Other'])
      unless validator.valid?(sub_condition)
        fail ArgumentError, "invalid value for \"sub_condition\", must be one of #{validator.allowable_values}."
      end
      @sub_condition = sub_condition
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          featured_offer_segments == o.featured_offer_segments &&
          seller_id == o.seller_id &&
          condition == o.condition &&
          sub_condition == o.sub_condition &&
          fulfillment_type == o.fulfillment_type &&
          listing_price == o.listing_price &&
          shipping_options == o.shipping_options &&
          points == o.points &&
          prime_details == o.prime_details && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [featured_offer_segments, seller_id, condition, sub_condition, fulfillment_type, listing_price, shipping_options, points, prime_details].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        AmzSpApi::ProductPricing20220501.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
