=begin
#Selling Partner API for Supply Sources

#Manage configurations and capabilities of seller supply sources.

OpenAPI spec version: 2020-07-01

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

module AmzSpApi::SupplySourcesApiModel
  class SupplySourcesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Archive a supply source, making it inactive. Cannot be undone.
    # @param supply_source_id The unique identifier of a supply source.
    # @param [Hash] opts the optional parameters
    # @return [ErrorList]
    def archive_supply_source(supply_source_id, opts = {})
      data, _status_code, _headers = archive_supply_source_with_http_info(supply_source_id, opts)
      data
    end

    # Archive a supply source, making it inactive. Cannot be undone.
    # @param supply_source_id The unique identifier of a supply source.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ErrorList, Integer, Hash)>] ErrorList data, response status code and response headers
    def archive_supply_source_with_http_info(supply_source_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupplySourcesApi.archive_supply_source ...'
      end
      # verify the required parameter 'supply_source_id' is set
      if @api_client.config.client_side_validation && supply_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'supply_source_id' when calling SupplySourcesApi.archive_supply_source"
      end
      # resource path
      local_var_path = '/supplySources/2020-07-01/supplySources/{supplySourceId}'.sub('{' + 'supplySourceId' + '}', supply_source_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ErrorList' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupplySourcesApi#archive_supply_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new supply source.
    # @param body A request to create a supply source.
    # @param [Hash] opts the optional parameters
    # @return [CreateSupplySourceResponse]
    def create_supply_source(body, opts = {})
      data, _status_code, _headers = create_supply_source_with_http_info(body, opts)
      data
    end

    # Create a new supply source.
    # @param body A request to create a supply source.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSupplySourceResponse, Integer, Hash)>] CreateSupplySourceResponse data, response status code and response headers
    def create_supply_source_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupplySourcesApi.create_supply_source ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SupplySourcesApi.create_supply_source"
      end
      # resource path
      local_var_path = '/supplySources/2020-07-01/supplySources'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CreateSupplySourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupplySourcesApi#create_supply_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a supply source.
    # @param supply_source_id The unique identifier of a supply source.
    # @param [Hash] opts the optional parameters
    # @return [SupplySource]
    def get_supply_source(supply_source_id, opts = {})
      data, _status_code, _headers = get_supply_source_with_http_info(supply_source_id, opts)
      data
    end

    # Retrieve a supply source.
    # @param supply_source_id The unique identifier of a supply source.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupplySource, Integer, Hash)>] SupplySource data, response status code and response headers
    def get_supply_source_with_http_info(supply_source_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupplySourcesApi.get_supply_source ...'
      end
      # verify the required parameter 'supply_source_id' is set
      if @api_client.config.client_side_validation && supply_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'supply_source_id' when calling SupplySourcesApi.get_supply_source"
      end
      # resource path
      local_var_path = '/supplySources/2020-07-01/supplySources/{supplySourceId}'.sub('{' + 'supplySourceId' + '}', supply_source_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SupplySource' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupplySourcesApi#get_supply_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # The path to retrieve paginated supply sources.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page_token The pagination token to retrieve a specific page of results.
    # @option opts [BigDecimal] :page_size The number of supply sources to return per paginated request. (default to 10.0)
    # @return [GetSupplySourcesResponse]
    def get_supply_sources(opts = {})
      data, _status_code, _headers = get_supply_sources_with_http_info(opts)
      data
    end

    # The path to retrieve paginated supply sources.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page_token The pagination token to retrieve a specific page of results.
    # @option opts [BigDecimal] :page_size The number of supply sources to return per paginated request.
    # @return [Array<(GetSupplySourcesResponse, Integer, Hash)>] GetSupplySourcesResponse data, response status code and response headers
    def get_supply_sources_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupplySourcesApi.get_supply_sources ...'
      end
      # resource path
      local_var_path = '/supplySources/2020-07-01/supplySources'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextPageToken'] = opts[:'next_page_token'] if !opts[:'next_page_token'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetSupplySourcesResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupplySourcesApi#get_supply_sources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the configuration and capabilities of a supply source.
    # @param supply_source_id The unique identitier of a supply source.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSupplySourceRequest] :body 
    # @return [ErrorList]
    def update_supply_source(supply_source_id, opts = {})
      data, _status_code, _headers = update_supply_source_with_http_info(supply_source_id, opts)
      data
    end

    # Update the configuration and capabilities of a supply source.
    # @param supply_source_id The unique identitier of a supply source.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSupplySourceRequest] :body 
    # @return [Array<(ErrorList, Integer, Hash)>] ErrorList data, response status code and response headers
    def update_supply_source_with_http_info(supply_source_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupplySourcesApi.update_supply_source ...'
      end
      # verify the required parameter 'supply_source_id' is set
      if @api_client.config.client_side_validation && supply_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'supply_source_id' when calling SupplySourcesApi.update_supply_source"
      end
      # resource path
      local_var_path = '/supplySources/2020-07-01/supplySources/{supplySourceId}'.sub('{' + 'supplySourceId' + '}', supply_source_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ErrorList' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupplySourcesApi#update_supply_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the status of a supply source.
    # @param supply_source_id The unique identifier of a supply source.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSupplySourceStatusRequest] :body 
    # @return [ErrorList]
    def update_supply_source_status(supply_source_id, opts = {})
      data, _status_code, _headers = update_supply_source_status_with_http_info(supply_source_id, opts)
      data
    end

    # Update the status of a supply source.
    # @param supply_source_id The unique identifier of a supply source.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSupplySourceStatusRequest] :body 
    # @return [Array<(ErrorList, Integer, Hash)>] ErrorList data, response status code and response headers
    def update_supply_source_status_with_http_info(supply_source_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupplySourcesApi.update_supply_source_status ...'
      end
      # verify the required parameter 'supply_source_id' is set
      if @api_client.config.client_side_validation && supply_source_id.nil?
        fail ArgumentError, "Missing the required parameter 'supply_source_id' when calling SupplySourcesApi.update_supply_source_status"
      end
      # resource path
      local_var_path = '/supplySources/2020-07-01/supplySources/{supplySourceId}/status'.sub('{' + 'supplySourceId' + '}', supply_source_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ErrorList' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupplySourcesApi#update_supply_source_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
