=begin
#The Selling Partner API for Automotive.

#The Selling Partner API for Automotive provides programmatic access to information needed by selling partners to provide compatibility information about their listed products.

OpenAPI spec version: 2024-11-01

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

require 'date'

module AmzSpApi::VehiclesApiModel
  # Combinations of attributes and unique identifier that represents a vehicle in vehicle list.
  class Vehicle
    # Vehicle Brand.
    attr_accessor :make

    # Specific model of a vehicle.
    attr_accessor :model

    # Name of the vehicle variant.
    attr_accessor :variant_name

    # Body style of vehicle (example: Hatchback, Cabriolet).
    attr_accessor :body_style

    # Drive type of vehicle(example: Rear wheel drive).
    attr_accessor :drive_type

    # Energy Source for the vehicle(example: Petrol)
    attr_accessor :energy

    # Engine output of vehicle.
    attr_accessor :engine_output

    attr_accessor :manufacturing_start_date

    attr_accessor :manufacturing_stop_date

    # The date on which the vehicle was last updated, in ISO-8601 date/time format.
    attr_accessor :last_processed_date

    attr_accessor :status

    # Identifiers that can be used to identify the vehicle uniquely
    attr_accessor :identifiers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'make' => :'make',
        :'model' => :'model',
        :'variant_name' => :'variantName',
        :'body_style' => :'bodyStyle',
        :'drive_type' => :'driveType',
        :'energy' => :'energy',
        :'engine_output' => :'engineOutput',
        :'manufacturing_start_date' => :'manufacturingStartDate',
        :'manufacturing_stop_date' => :'manufacturingStopDate',
        :'last_processed_date' => :'lastProcessedDate',
        :'status' => :'status',
        :'identifiers' => :'identifiers'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'make' => :'Object',
        :'model' => :'Object',
        :'variant_name' => :'Object',
        :'body_style' => :'Object',
        :'drive_type' => :'Object',
        :'energy' => :'Object',
        :'engine_output' => :'Object',
        :'manufacturing_start_date' => :'Object',
        :'manufacturing_stop_date' => :'Object',
        :'last_processed_date' => :'Object',
        :'status' => :'Object',
        :'identifiers' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `AmzSpApi::VehiclesApiModel::Vehicle` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `AmzSpApi::VehiclesApiModel::Vehicle`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'make')
        self.make = attributes[:'make']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'variant_name')
        self.variant_name = attributes[:'variant_name']
      end

      if attributes.key?(:'body_style')
        self.body_style = attributes[:'body_style']
      end

      if attributes.key?(:'drive_type')
        self.drive_type = attributes[:'drive_type']
      end

      if attributes.key?(:'energy')
        self.energy = attributes[:'energy']
      end

      if attributes.key?(:'engine_output')
        if (value = attributes[:'engine_output']).is_a?(Array)
          self.engine_output = value
        end
      end

      if attributes.key?(:'manufacturing_start_date')
        self.manufacturing_start_date = attributes[:'manufacturing_start_date']
      end

      if attributes.key?(:'manufacturing_stop_date')
        self.manufacturing_stop_date = attributes[:'manufacturing_stop_date']
      end

      if attributes.key?(:'last_processed_date')
        self.last_processed_date = attributes[:'last_processed_date']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'identifiers')
        if (value = attributes[:'identifiers']).is_a?(Array)
          self.identifiers = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @make.nil?
        invalid_properties.push('invalid value for "make", make cannot be nil.')
      end

      if @model.nil?
        invalid_properties.push('invalid value for "model", model cannot be nil.')
      end

      if @identifiers.nil?
        invalid_properties.push('invalid value for "identifiers", identifiers cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @make.nil?
      return false if @model.nil?
      return false if @identifiers.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          make == o.make &&
          model == o.model &&
          variant_name == o.variant_name &&
          body_style == o.body_style &&
          drive_type == o.drive_type &&
          energy == o.energy &&
          engine_output == o.engine_output &&
          manufacturing_start_date == o.manufacturing_start_date &&
          manufacturing_stop_date == o.manufacturing_stop_date &&
          last_processed_date == o.last_processed_date &&
          status == o.status &&
          identifiers == o.identifiers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [make, model, variant_name, body_style, drive_type, energy, engine_output, manufacturing_start_date, manufacturing_stop_date, last_processed_date, status, identifiers].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        AmzSpApi::VehiclesApiModel.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
