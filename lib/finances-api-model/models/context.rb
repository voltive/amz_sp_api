=begin
#The Selling Partner API for Finances

#The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.

OpenAPI spec version: 2024-06-19

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

require 'date'

module AmzSpApi::FinancesApiModel
  # Additional Information about the item.
  class Context
    attr_accessor :context_type

    # Store name related to transaction.
    attr_accessor :store_name

    # Order type of the transaction.
    attr_accessor :order_type

    # Channel details of related transaction.
    attr_accessor :channel

    # Amazon Standard Identification Number (ASIN) of the item.
    attr_accessor :asin

    # Stock keeping unit (SKU) of the item.
    attr_accessor :sku

    # Quantity of the item shipped.
    attr_accessor :quantity_shipped

    # Fulfillment network of the item.
    attr_accessor :fulfillment_network

    # Type of payment made.
    attr_accessor :payment_type

    # Method of payment made.
    attr_accessor :payment_method

    # Reference number of payment made.
    attr_accessor :payment_reference

    attr_accessor :payment_date

    # Deferral policy applied on the transaction.  Example: 'B2B','DD7'
    attr_accessor :deferral_reason

    attr_accessor :maturity_date

    # Status of the transaction.   Example: 'HOLD','RELEASE'
    attr_accessor :deferral_status

    attr_accessor :start_time

    attr_accessor :end_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'context_type' => :'contextType',
        :'store_name' => :'storeName',
        :'order_type' => :'orderType',
        :'channel' => :'channel',
        :'asin' => :'asin',
        :'sku' => :'sku',
        :'quantity_shipped' => :'quantityShipped',
        :'fulfillment_network' => :'fulfillmentNetwork',
        :'payment_type' => :'paymentType',
        :'payment_method' => :'paymentMethod',
        :'payment_reference' => :'paymentReference',
        :'payment_date' => :'paymentDate',
        :'deferral_reason' => :'deferralReason',
        :'maturity_date' => :'maturityDate',
        :'deferral_status' => :'deferralStatus',
        :'start_time' => :'startTime',
        :'end_time' => :'endTime'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'context_type' => :'',
        :'store_name' => :'',
        :'order_type' => :'',
        :'channel' => :'',
        :'asin' => :'',
        :'sku' => :'',
        :'quantity_shipped' => :'',
        :'fulfillment_network' => :'',
        :'payment_type' => :'',
        :'payment_method' => :'',
        :'payment_reference' => :'',
        :'payment_date' => :'',
        :'deferral_reason' => :'',
        :'maturity_date' => :'',
        :'deferral_status' => :'',
        :'start_time' => :'',
        :'end_time' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `AmzSpApi::FinancesApiModel::Context` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `AmzSpApi::FinancesApiModel::Context`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'context_type')
        self.context_type = attributes[:'context_type']
      end

      if attributes.key?(:'store_name')
        self.store_name = attributes[:'store_name']
      end

      if attributes.key?(:'order_type')
        self.order_type = attributes[:'order_type']
      end

      if attributes.key?(:'channel')
        self.channel = attributes[:'channel']
      end

      if attributes.key?(:'asin')
        self.asin = attributes[:'asin']
      end

      if attributes.key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.key?(:'quantity_shipped')
        self.quantity_shipped = attributes[:'quantity_shipped']
      end

      if attributes.key?(:'fulfillment_network')
        self.fulfillment_network = attributes[:'fulfillment_network']
      end

      if attributes.key?(:'payment_type')
        self.payment_type = attributes[:'payment_type']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'payment_reference')
        self.payment_reference = attributes[:'payment_reference']
      end

      if attributes.key?(:'payment_date')
        self.payment_date = attributes[:'payment_date']
      end

      if attributes.key?(:'deferral_reason')
        self.deferral_reason = attributes[:'deferral_reason']
      end

      if attributes.key?(:'maturity_date')
        self.maturity_date = attributes[:'maturity_date']
      end

      if attributes.key?(:'deferral_status')
        self.deferral_status = attributes[:'deferral_status']
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @context_type.nil?
        invalid_properties.push('invalid value for "context_type", context_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @context_type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          context_type == o.context_type &&
          store_name == o.store_name &&
          order_type == o.order_type &&
          channel == o.channel &&
          asin == o.asin &&
          sku == o.sku &&
          quantity_shipped == o.quantity_shipped &&
          fulfillment_network == o.fulfillment_network &&
          payment_type == o.payment_type &&
          payment_method == o.payment_method &&
          payment_reference == o.payment_reference &&
          payment_date == o.payment_date &&
          deferral_reason == o.deferral_reason &&
          maturity_date == o.maturity_date &&
          deferral_status == o.deferral_status &&
          start_time == o.start_time &&
          end_time == o.end_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [context_type, store_name, order_type, channel, asin, sku, quantity_shipped, fulfillment_network, payment_type, payment_method, payment_reference, payment_date, deferral_reason, maturity_date, deferral_status, start_time, end_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        AmzSpApi::FinancesApiModel.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
