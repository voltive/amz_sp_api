=begin
#Selling Partner API for Finances

#The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.

OpenAPI spec version: v0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

# Common files
require 'finances_v0/api_client'
require 'finances_v0/api_error'
require 'finances_v0/version'
require 'finances_v0/configuration'

# Models
require 'finances_v0/models/adhoc_disbursement_event'
require 'finances_v0/models/adhoc_disbursement_event_list'
require 'finances_v0/models/adjustment_event'
require 'finances_v0/models/adjustment_event_list'
require 'finances_v0/models/adjustment_item'
require 'finances_v0/models/adjustment_item_list'
require 'finances_v0/models/affordability_expense_event'
require 'finances_v0/models/affordability_expense_event_list'
require 'finances_v0/models/big_decimal'
require 'finances_v0/models/capacity_reservation_billing_event'
require 'finances_v0/models/capacity_reservation_billing_event_list'
require 'finances_v0/models/charge_component'
require 'finances_v0/models/charge_component_list'
require 'finances_v0/models/charge_instrument'
require 'finances_v0/models/charge_instrument_list'
require 'finances_v0/models/charge_refund_event'
require 'finances_v0/models/charge_refund_event_list'
require 'finances_v0/models/charge_refund_transaction'
require 'finances_v0/models/charge_refund_transactions'
require 'finances_v0/models/coupon_payment_event'
require 'finances_v0/models/coupon_payment_event_list'
require 'finances_v0/models/currency'
require 'finances_v0/models/date'
require 'finances_v0/models/debt_recovery_event'
require 'finances_v0/models/debt_recovery_event_list'
require 'finances_v0/models/debt_recovery_item'
require 'finances_v0/models/debt_recovery_item_list'
require 'finances_v0/models/direct_payment'
require 'finances_v0/models/direct_payment_list'
require 'finances_v0/models/error'
require 'finances_v0/models/error_list'
require 'finances_v0/models/fba_liquidation_event'
require 'finances_v0/models/fba_liquidation_event_list'
require 'finances_v0/models/failed_adhoc_disbursement_event'
require 'finances_v0/models/failed_adhoc_disbursement_event_list'
require 'finances_v0/models/fee_component'
require 'finances_v0/models/fee_component_list'
require 'finances_v0/models/financial_event_group'
require 'finances_v0/models/financial_event_group_list'
require 'finances_v0/models/financial_events'
require 'finances_v0/models/imaging_services_fee_event'
require 'finances_v0/models/imaging_services_fee_event_list'
require 'finances_v0/models/list_financial_event_groups_payload'
require 'finances_v0/models/list_financial_event_groups_response'
require 'finances_v0/models/list_financial_events_payload'
require 'finances_v0/models/list_financial_events_response'
require 'finances_v0/models/loan_servicing_event'
require 'finances_v0/models/loan_servicing_event_list'
require 'finances_v0/models/network_commingling_transaction_event'
require 'finances_v0/models/network_commingling_transaction_event_list'
require 'finances_v0/models/pay_with_amazon_event'
require 'finances_v0/models/pay_with_amazon_event_list'
require 'finances_v0/models/product_ads_payment_event'
require 'finances_v0/models/product_ads_payment_event_list'
require 'finances_v0/models/promotion'
require 'finances_v0/models/promotion_list'
require 'finances_v0/models/removal_shipment_adjustment_event'
require 'finances_v0/models/removal_shipment_adjustment_event_list'
require 'finances_v0/models/removal_shipment_event'
require 'finances_v0/models/removal_shipment_event_list'
require 'finances_v0/models/removal_shipment_item'
require 'finances_v0/models/removal_shipment_item_adjustment'
require 'finances_v0/models/removal_shipment_item_list'
require 'finances_v0/models/rental_transaction_event'
require 'finances_v0/models/rental_transaction_event_list'
require 'finances_v0/models/retrocharge_event'
require 'finances_v0/models/retrocharge_event_list'
require 'finances_v0/models/safet_reimbursement_event'
require 'finances_v0/models/safet_reimbursement_event_list'
require 'finances_v0/models/safet_reimbursement_item'
require 'finances_v0/models/safet_reimbursement_item_list'
require 'finances_v0/models/seller_deal_payment_event'
require 'finances_v0/models/seller_deal_payment_event_list'
require 'finances_v0/models/seller_review_enrollment_payment_event'
require 'finances_v0/models/seller_review_enrollment_payment_event_list'
require 'finances_v0/models/service_fee_event'
require 'finances_v0/models/service_fee_event_list'
require 'finances_v0/models/shipment_event'
require 'finances_v0/models/shipment_event_list'
require 'finances_v0/models/shipment_item'
require 'finances_v0/models/shipment_item_list'
require 'finances_v0/models/shipment_settle_event_list'
require 'finances_v0/models/solution_provider_credit_event'
require 'finances_v0/models/solution_provider_credit_event_list'
require 'finances_v0/models/tds_reimbursement_event'
require 'finances_v0/models/tds_reimbursement_event_list'
require 'finances_v0/models/tax_withheld_component'
require 'finances_v0/models/tax_withheld_component_list'
require 'finances_v0/models/tax_withholding_event'
require 'finances_v0/models/tax_withholding_event_list'
require 'finances_v0/models/tax_withholding_period'
require 'finances_v0/models/trial_shipment_event'
require 'finances_v0/models/trial_shipment_event_list'
require 'finances_v0/models/value_added_service_charge_event'
require 'finances_v0/models/value_added_service_charge_event_list'

# APIs
require 'finances_v0/api/default_api'

module AmzSpApi::FinancesV0
  class << self
    # Customize default settings for the SDK using block.
    #   AmzSpApi::FinancesV0.configure do |config|
    #     config.username = "xxx"
    #     config.password = "xxx"
    #   end
    # If no block given, return the default Configuration object.
    def configure
      if block_given?
        yield(Configuration.default)
      else
        Configuration.default
      end
    end
  end
end
