=begin
#The Selling Partner API for FBA inbound operations.

#The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.

OpenAPI spec version: 2024-03-20

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.68
=end

module AmzSpApi::FulfillmentInbound20240320
  class FbaInboundApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [CancelInboundPlanResponse]
    def cancel_inbound_plan(inbound_plan_id, opts = {})
      data, _status_code, _headers = cancel_inbound_plan_with_http_info(inbound_plan_id, opts)
      data
    end

    # Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelInboundPlanResponse, Integer, Hash)>] CancelInboundPlanResponse data, response status code and response headers
    def cancel_inbound_plan_with_http_info(inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.cancel_inbound_plan ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.cancel_inbound_plan"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/cancellation'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'CancelInboundPlanResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#cancel_inbound_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancels a self-ship appointment slot against a shipment. Only available in the following [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
    # @param body The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [CancelSelfShipAppointmentResponse]
    def cancel_self_ship_appointment(body, inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = cancel_self_ship_appointment_with_http_info(body, inbound_plan_id, shipment_id, opts)
      data
    end

    # Cancels a self-ship appointment slot against a shipment. Only available in the following [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
    # @param body The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelSelfShipAppointmentResponse, Integer, Hash)>] CancelSelfShipAppointmentResponse data, response status code and response headers
    def cancel_self_ship_appointment_with_http_info(body, inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.cancel_self_ship_appointment ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.cancel_self_ship_appointment"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.cancel_self_ship_appointment"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.cancel_self_ship_appointment"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentCancellation'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CancelSelfShipAppointmentResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#cancel_self_ship_appointment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program `CONFIRMED_DELIVERY_WINDOW` require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id The shipment to confirm the delivery window option for.
    # @param delivery_window_option_id The id of the delivery window option to be confirmed.
    # @param [Hash] opts the optional parameters
    # @return [ConfirmDeliveryWindowOptionsResponse]
    def confirm_delivery_window_options(inbound_plan_id, shipment_id, delivery_window_option_id, opts = {})
      data, _status_code, _headers = confirm_delivery_window_options_with_http_info(inbound_plan_id, shipment_id, delivery_window_option_id, opts)
      data
    end

    # Confirms the delivery window option for chosen shipment within an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new delivery window options cannot be generated, but the chosen delivery window option can be updated before shipment closure. The window is used to provide the expected time when a shipment will arrive at the warehouse. All transportation options which have the program &#x60;CONFIRMED_DELIVERY_WINDOW&#x60; require a delivery window to be confirmed prior to transportation option confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id The shipment to confirm the delivery window option for.
    # @param delivery_window_option_id The id of the delivery window option to be confirmed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfirmDeliveryWindowOptionsResponse, Integer, Hash)>] ConfirmDeliveryWindowOptionsResponse data, response status code and response headers
    def confirm_delivery_window_options_with_http_info(inbound_plan_id, shipment_id, delivery_window_option_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.confirm_delivery_window_options ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.confirm_delivery_window_options"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.confirm_delivery_window_options"
      end
      # verify the required parameter 'delivery_window_option_id' is set
      if @api_client.config.client_side_validation && delivery_window_option_id.nil?
        fail ArgumentError, "Missing the required parameter 'delivery_window_option_id' when calling FbaInboundApi.confirm_delivery_window_options"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s).sub('{' + 'deliveryWindowOptionId' + '}', delivery_window_option_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ConfirmDeliveryWindowOptionsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#confirm_delivery_window_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param packing_option_id Identifier of a packing option.
    # @param [Hash] opts the optional parameters
    # @return [ConfirmPackingOptionResponse]
    def confirm_packing_option(inbound_plan_id, packing_option_id, opts = {})
      data, _status_code, _headers = confirm_packing_option_with_http_info(inbound_plan_id, packing_option_id, opts)
      data
    end

    # Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param packing_option_id Identifier of a packing option.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfirmPackingOptionResponse, Integer, Hash)>] ConfirmPackingOptionResponse data, response status code and response headers
    def confirm_packing_option_with_http_info(inbound_plan_id, packing_option_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.confirm_packing_option ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.confirm_packing_option"
      end
      # verify the required parameter 'packing_option_id' is set
      if @api_client.config.client_side_validation && packing_option_id.nil?
        fail ArgumentError, "Missing the required parameter 'packing_option_id' when calling FbaInboundApi.confirm_packing_option"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'packingOptionId' + '}', packing_option_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ConfirmPackingOptionResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#confirm_packing_option\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
    # @param [Hash] opts the optional parameters
    # @return [ConfirmPlacementOptionResponse]
    def confirm_placement_option(inbound_plan_id, placement_option_id, opts = {})
      data, _status_code, _headers = confirm_placement_option_with_http_info(inbound_plan_id, placement_option_id, opts)
      data
    end

    # Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfirmPlacementOptionResponse, Integer, Hash)>] ConfirmPlacementOptionResponse data, response status code and response headers
    def confirm_placement_option_with_http_info(inbound_plan_id, placement_option_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.confirm_placement_option ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.confirm_placement_option"
      end
      # verify the required parameter 'placement_option_id' is set
      if @api_client.config.client_side_validation && placement_option_id.nil?
        fail ArgumentError, "Missing the required parameter 'placement_option_id' when calling FbaInboundApi.confirm_placement_option"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'placementOptionId' + '}', placement_option_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ConfirmPlacementOptionResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#confirm_placement_option\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param content_update_preview_id Identifier of a content update preview.
    # @param [Hash] opts the optional parameters
    # @return [ConfirmShipmentContentUpdatePreviewResponse]
    def confirm_shipment_content_update_preview(inbound_plan_id, shipment_id, content_update_preview_id, opts = {})
      data, _status_code, _headers = confirm_shipment_content_update_preview_with_http_info(inbound_plan_id, shipment_id, content_update_preview_id, opts)
      data
    end

    # Confirm a shipment content update preview and accept the changes in transportation cost.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param content_update_preview_id Identifier of a content update preview.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfirmShipmentContentUpdatePreviewResponse, Integer, Hash)>] ConfirmShipmentContentUpdatePreviewResponse data, response status code and response headers
    def confirm_shipment_content_update_preview_with_http_info(inbound_plan_id, shipment_id, content_update_preview_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.confirm_shipment_content_update_preview ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.confirm_shipment_content_update_preview"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.confirm_shipment_content_update_preview"
      end
      # verify the required parameter 'content_update_preview_id' is set
      if @api_client.config.client_side_validation && content_update_preview_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_update_preview_id' when calling FbaInboundApi.confirm_shipment_content_update_preview"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s).sub('{' + 'contentUpdatePreviewId' + '}', content_update_preview_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ConfirmShipmentContentUpdatePreviewResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#confirm_shipment_content_update_preview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;confirmTransportationOptions&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [ConfirmTransportationOptionsResponse]
    def confirm_transportation_options(body, inbound_plan_id, opts = {})
      data, _status_code, _headers = confirm_transportation_options_with_http_info(body, inbound_plan_id, opts)
      data
    end

    # Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;confirmTransportationOptions&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfirmTransportationOptionsResponse, Integer, Hash)>] ConfirmTransportationOptionsResponse data, response status code and response headers
    def confirm_transportation_options_with_http_info(body, inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.confirm_transportation_options ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.confirm_transportation_options"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.confirm_transportation_options"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ConfirmTransportationOptionsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#confirm_transportation_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon's fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;createInboundPlan&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [CreateInboundPlanResponse]
    def create_inbound_plan(body, opts = {})
      data, _status_code, _headers = create_inbound_plan_with_http_info(body, opts)
      data
    end

    # Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon&#x27;s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;createInboundPlan&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateInboundPlanResponse, Integer, Hash)>] CreateInboundPlanResponse data, response status code and response headers
    def create_inbound_plan_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.create_inbound_plan ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.create_inbound_plan"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CreateInboundPlanResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#create_inbound_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;createMarketplaceItemLabels&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [CreateMarketplaceItemLabelsResponse]
    def create_marketplace_item_labels(body, opts = {})
      data, _status_code, _headers = create_marketplace_item_labels_with_http_info(body, opts)
      data
    end

    # For a given marketplace - creates labels for a list of MSKUs.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;createMarketplaceItemLabels&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateMarketplaceItemLabelsResponse, Integer, Hash)>] CreateMarketplaceItemLabelsResponse data, response status code and response headers
    def create_marketplace_item_labels_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.create_marketplace_item_labels ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.create_marketplace_item_labels"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/items/labels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CreateMarketplaceItemLabelsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#create_marketplace_item_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id The shipment to generate delivery window options for.
    # @param [Hash] opts the optional parameters
    # @return [GenerateDeliveryWindowOptionsResponse]
    def generate_delivery_window_options(inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = generate_delivery_window_options_with_http_info(inbound_plan_id, shipment_id, opts)
      data
    end

    # Generates available delivery window options for a given shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id The shipment to generate delivery window options for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenerateDeliveryWindowOptionsResponse, Integer, Hash)>] GenerateDeliveryWindowOptionsResponse data, response status code and response headers
    def generate_delivery_window_options_with_http_info(inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.generate_delivery_window_options ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.generate_delivery_window_options"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.generate_delivery_window_options"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GenerateDeliveryWindowOptionsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#generate_delivery_window_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [GeneratePackingOptionsResponse]
    def generate_packing_options(inbound_plan_id, opts = {})
      data, _status_code, _headers = generate_packing_options_with_http_info(inbound_plan_id, opts)
      data
    end

    # Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneratePackingOptionsResponse, Integer, Hash)>] GeneratePackingOptionsResponse data, response status code and response headers
    def generate_packing_options_with_http_info(inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.generate_packing_options ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.generate_packing_options"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GeneratePackingOptionsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#generate_packing_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;generatePlacementOptions&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [GeneratePlacementOptionsResponse]
    def generate_placement_options(body, inbound_plan_id, opts = {})
      data, _status_code, _headers = generate_placement_options_with_http_info(body, inbound_plan_id, opts)
      data
    end

    # Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;generatePlacementOptions&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GeneratePlacementOptionsResponse, Integer, Hash)>] GeneratePlacementOptionsResponse data, response status code and response headers
    def generate_placement_options_with_http_info(body, inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.generate_placement_options ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.generate_placement_options"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.generate_placement_options"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GeneratePlacementOptionsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#generate_placement_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initiates the process of generating the appointment slots list. Only available in the following [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
    # @param body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [GenerateSelfShipAppointmentSlotsResponse]
    def generate_self_ship_appointment_slots(body, inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = generate_self_ship_appointment_slots_with_http_info(body, inbound_plan_id, shipment_id, opts)
      data
    end

    # Initiates the process of generating the appointment slots list. Only available in the following [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
    # @param body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenerateSelfShipAppointmentSlotsResponse, Integer, Hash)>] GenerateSelfShipAppointmentSlotsResponse data, response status code and response headers
    def generate_self_ship_appointment_slots_with_http_info(body, inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.generate_self_ship_appointment_slots ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.generate_self_ship_appointment_slots"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.generate_self_ship_appointment_slots"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.generate_self_ship_appointment_slots"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GenerateSelfShipAppointmentSlotsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#generate_self_ship_appointment_slots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [GenerateShipmentContentUpdatePreviewsResponse]
    def generate_shipment_content_update_previews(body, inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = generate_shipment_content_update_previews_with_http_info(body, inbound_plan_id, shipment_id, opts)
      data
    end

    # Generate a shipment content update preview given a set of intended boxes and/or items for a shipment with a confirmed carrier. The shipment content update preview will be viewable with the updated costs and contents prior to confirmation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenerateShipmentContentUpdatePreviewsResponse, Integer, Hash)>] GenerateShipmentContentUpdatePreviewsResponse data, response status code and response headers
    def generate_shipment_content_update_previews_with_http_info(body, inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.generate_shipment_content_update_previews ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.generate_shipment_content_update_previews"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.generate_shipment_content_update_previews"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.generate_shipment_content_update_previews"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GenerateShipmentContentUpdatePreviewsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#generate_shipment_content_update_previews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;generateTransportationOptions&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [GenerateTransportationOptionsResponse]
    def generate_transportation_options(body, inbound_plan_id, opts = {})
      data, _status_code, _headers = generate_transportation_options_with_http_info(body, inbound_plan_id, opts)
      data
    end

    # Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;generateTransportationOptions&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenerateTransportationOptionsResponse, Integer, Hash)>] GenerateTransportationOptionsResponse data, response status code and response headers
    def generate_transportation_options_with_http_info(body, inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.generate_transportation_options ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.generate_transportation_options"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.generate_transportation_options"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GenerateTransportationOptionsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#generate_transportation_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [GetDeliveryChallanDocumentResponse]
    def get_delivery_challan_document(inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = get_delivery_challan_document_with_http_info(inbound_plan_id, shipment_id, opts)
      data
    end

    # Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDeliveryChallanDocumentResponse, Integer, Hash)>] GetDeliveryChallanDocumentResponse data, response status code and response headers
    def get_delivery_challan_document_with_http_info(inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.get_delivery_challan_document ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.get_delivery_challan_document"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.get_delivery_challan_document"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryChallanDocument'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetDeliveryChallanDocumentResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#get_delivery_challan_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param operation_id Identifier of an asynchronous operation.
    # @param [Hash] opts the optional parameters
    # @return [InboundOperationStatus]
    def get_inbound_operation_status(operation_id, opts = {})
      data, _status_code, _headers = get_inbound_operation_status_with_http_info(operation_id, opts)
      data
    end

    # Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param operation_id Identifier of an asynchronous operation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundOperationStatus, Integer, Hash)>] InboundOperationStatus data, response status code and response headers
    def get_inbound_operation_status_with_http_info(operation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.get_inbound_operation_status ...'
      end
      # verify the required parameter 'operation_id' is set
      if @api_client.config.client_side_validation && operation_id.nil?
        fail ArgumentError, "Missing the required parameter 'operation_id' when calling FbaInboundApi.get_inbound_operation_status"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/operations/{operationId}'.sub('{' + 'operationId' + '}', operation_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InboundOperationStatus' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#get_inbound_operation_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [InboundPlan]
    def get_inbound_plan(inbound_plan_id, opts = {})
      data, _status_code, _headers = get_inbound_plan_with_http_info(inbound_plan_id, opts)
      data
    end

    # Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundPlan, Integer, Hash)>] InboundPlan data, response status code and response headers
    def get_inbound_plan_with_http_info(inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.get_inbound_plan ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.get_inbound_plan"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InboundPlan' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#get_inbound_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse. Only available in the following [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of self ship appointment slots to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [GetSelfShipAppointmentSlotsResponse]
    def get_self_ship_appointment_slots(inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = get_self_ship_appointment_slots_with_http_info(inbound_plan_id, shipment_id, opts)
      data
    end

    # Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse. Only available in the following [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of self ship appointment slots to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(GetSelfShipAppointmentSlotsResponse, Integer, Hash)>] GetSelfShipAppointmentSlotsResponse data, response status code and response headers
    def get_self_ship_appointment_slots_with_http_info(inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.get_self_ship_appointment_slots ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.get_self_ship_appointment_slots"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.get_self_ship_appointment_slots"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetSelfShipAppointmentSlotsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#get_self_ship_appointment_slots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [Shipment]
    def get_shipment(inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = get_shipment_with_http_info(inbound_plan_id, shipment_id, opts)
      data
    end

    # Provides the full details for a specific shipment within an inbound plan. The &#x60;transportationOptionId&#x60; inside &#x60;acceptedTransportationSelection&#x60; can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Shipment, Integer, Hash)>] Shipment data, response status code and response headers
    def get_shipment_with_http_info(inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.get_shipment ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.get_shipment"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.get_shipment"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Shipment' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#get_shipment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param content_update_preview_id Identifier of a content update preview.
    # @param [Hash] opts the optional parameters
    # @return [ContentUpdatePreview]
    def get_shipment_content_update_preview(inbound_plan_id, shipment_id, content_update_preview_id, opts = {})
      data, _status_code, _headers = get_shipment_content_update_preview_with_http_info(inbound_plan_id, shipment_id, content_update_preview_id, opts)
      data
    end

    # Retrieve a shipment content update preview which provides a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param content_update_preview_id Identifier of a content update preview.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContentUpdatePreview, Integer, Hash)>] ContentUpdatePreview data, response status code and response headers
    def get_shipment_content_update_preview_with_http_info(inbound_plan_id, shipment_id, content_update_preview_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.get_shipment_content_update_preview ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.get_shipment_content_update_preview"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.get_shipment_content_update_preview"
      end
      # verify the required parameter 'content_update_preview_id' is set
      if @api_client.config.client_side_validation && content_update_preview_id.nil?
        fail ArgumentError, "Missing the required parameter 'content_update_preview_id' when calling FbaInboundApi.get_shipment_content_update_preview"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s).sub('{' + 'contentUpdatePreviewId' + '}', content_update_preview_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ContentUpdatePreview' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#get_shipment_content_update_preview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the `generateDeliveryWindowOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id The shipment to get delivery window options for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of delivery window options to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListDeliveryWindowOptionsResponse]
    def list_delivery_window_options(inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = list_delivery_window_options_with_http_info(inbound_plan_id, shipment_id, opts)
      data
    end

    # Retrieves all delivery window options for a shipment. Delivery window options must first be generated by the &#x60;generateDeliveryWindowOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id The shipment to get delivery window options for.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of delivery window options to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListDeliveryWindowOptionsResponse, Integer, Hash)>] ListDeliveryWindowOptionsResponse data, response status code and response headers
    def list_delivery_window_options_with_http_info(inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_delivery_window_options ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_delivery_window_options"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.list_delivery_window_options"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListDeliveryWindowOptionsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_delivery_window_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of boxes to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListInboundPlanBoxesResponse]
    def list_inbound_plan_boxes(inbound_plan_id, opts = {})
      data, _status_code, _headers = list_inbound_plan_boxes_with_http_info(inbound_plan_id, opts)
      data
    end

    # Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of boxes to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListInboundPlanBoxesResponse, Integer, Hash)>] ListInboundPlanBoxesResponse data, response status code and response headers
    def list_inbound_plan_boxes_with_http_info(inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_inbound_plan_boxes ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_inbound_plan_boxes"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListInboundPlanBoxesResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_inbound_plan_boxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of items to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListInboundPlanItemsResponse]
    def list_inbound_plan_items(inbound_plan_id, opts = {})
      data, _status_code, _headers = list_inbound_plan_items_with_http_info(inbound_plan_id, opts)
      data
    end

    # Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of items to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListInboundPlanItemsResponse, Integer, Hash)>] ListInboundPlanItemsResponse data, response status code and response headers
    def list_inbound_plan_items_with_http_info(inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_inbound_plan_items ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_inbound_plan_items"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListInboundPlanItemsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_inbound_plan_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of pallets to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListInboundPlanPalletsResponse]
    def list_inbound_plan_pallets(inbound_plan_id, opts = {})
      data, _status_code, _headers = list_inbound_plan_pallets_with_http_info(inbound_plan_id, opts)
      data
    end

    # Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of pallets to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListInboundPlanPalletsResponse, Integer, Hash)>] ListInboundPlanPalletsResponse data, response status code and response headers
    def list_inbound_plan_pallets_with_http_info(inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_inbound_plan_pallets ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_inbound_plan_pallets"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListInboundPlanPalletsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_inbound_plan_pallets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of inbound plans to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @option opts [String] :status The status of an inbound plan.
    # @option opts [String] :sort_by Sort by field.
    # @option opts [String] :sort_order The sort order.
    # @return [ListInboundPlansResponse]
    def list_inbound_plans(opts = {})
      data, _status_code, _headers = list_inbound_plans_with_http_info(opts)
      data
    end

    # Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of inbound plans to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @option opts [String] :status The status of an inbound plan.
    # @option opts [String] :sort_by Sort by field.
    # @option opts [String] :sort_order The sort order.
    # @return [Array<(ListInboundPlansResponse, Integer, Hash)>] ListInboundPlansResponse data, response status code and response headers
    def list_inbound_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_inbound_plans ...'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['ACTIVE', 'VOIDED', 'SHIPPED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of ACTIVE, VOIDED, SHIPPED'
      end
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !['LAST_UPDATED_TIME', 'CREATION_TIME'].include?(opts[:'sort_by'])
        fail ArgumentError, 'invalid value for "sort_by", must be one of LAST_UPDATED_TIME, CREATION_TIME'
      end
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !['ASC', 'DESC'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListInboundPlansResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_inbound_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.
    # @param marketplace_id The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
    # @param [Hash] opts the optional parameters
    # @return [ListItemComplianceDetailsResponse]
    def list_item_compliance_details(mskus, marketplace_id, opts = {})
      data, _status_code, _headers = list_item_compliance_details_with_http_info(mskus, marketplace_id, opts)
      data
    end

    # List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.
    # @param marketplace_id The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListItemComplianceDetailsResponse, Integer, Hash)>] ListItemComplianceDetailsResponse data, response status code and response headers
    def list_item_compliance_details_with_http_info(mskus, marketplace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_item_compliance_details ...'
      end
      # verify the required parameter 'mskus' is set
      if @api_client.config.client_side_validation && mskus.nil?
        fail ArgumentError, "Missing the required parameter 'mskus' when calling FbaInboundApi.list_item_compliance_details"
      end
      # verify the required parameter 'marketplace_id' is set
      if @api_client.config.client_side_validation && marketplace_id.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_id' when calling FbaInboundApi.list_item_compliance_details"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/items/compliance'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'mskus'] = @api_client.build_collection_param(mskus, :multi)
      query_params[:'marketplaceId'] = marketplace_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListItemComplianceDetailsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_item_compliance_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a page of boxes from a given packing group. These boxes were previously provided through the `setPackingInformation` operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param packing_group_id Identifier of a packing group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of packing group boxes to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListPackingGroupBoxesResponse]
    def list_packing_group_boxes(inbound_plan_id, packing_group_id, opts = {})
      data, _status_code, _headers = list_packing_group_boxes_with_http_info(inbound_plan_id, packing_group_id, opts)
      data
    end

    # Retrieves a page of boxes from a given packing group. These boxes were previously provided through the &#x60;setPackingInformation&#x60; operation. This API is used for workflows where boxes are packed before Amazon determines shipment splits.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param packing_group_id Identifier of a packing group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of packing group boxes to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListPackingGroupBoxesResponse, Integer, Hash)>] ListPackingGroupBoxesResponse data, response status code and response headers
    def list_packing_group_boxes_with_http_info(inbound_plan_id, packing_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_packing_group_boxes ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_packing_group_boxes"
      end
      # verify the required parameter 'packing_group_id' is set
      if @api_client.config.client_side_validation && packing_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'packing_group_id' when calling FbaInboundApi.list_packing_group_boxes"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'packingGroupId' + '}', packing_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListPackingGroupBoxesResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_packing_group_boxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param packing_group_id Identifier of a packing group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of packing group items to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListPackingGroupItemsResponse]
    def list_packing_group_items(inbound_plan_id, packing_group_id, opts = {})
      data, _status_code, _headers = list_packing_group_items_with_http_info(inbound_plan_id, packing_group_id, opts)
      data
    end

    # Retrieves a page of items in a given packing group. Packing options must first be generated by the corresponding operation before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param packing_group_id Identifier of a packing group.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of packing group items to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListPackingGroupItemsResponse, Integer, Hash)>] ListPackingGroupItemsResponse data, response status code and response headers
    def list_packing_group_items_with_http_info(inbound_plan_id, packing_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_packing_group_items ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_packing_group_items"
      end
      # verify the required parameter 'packing_group_id' is set
      if @api_client.config.client_side_validation && packing_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'packing_group_id' when calling FbaInboundApi.list_packing_group_items"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'packingGroupId' + '}', packing_group_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListPackingGroupItemsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_packing_group_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of packing options to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListPackingOptionsResponse]
    def list_packing_options(inbound_plan_id, opts = {})
      data, _status_code, _headers = list_packing_options_with_http_info(inbound_plan_id, opts)
      data
    end

    # Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of packing options to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListPackingOptionsResponse, Integer, Hash)>] ListPackingOptionsResponse data, response status code and response headers
    def list_packing_options_with_http_info(inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_packing_options ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_packing_options"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListPackingOptionsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_packing_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of placement options to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListPlacementOptionsResponse]
    def list_placement_options(inbound_plan_id, opts = {})
      data, _status_code, _headers = list_placement_options_with_http_info(inbound_plan_id, opts)
      data
    end

    # Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of placement options to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListPlacementOptionsResponse, Integer, Hash)>] ListPlacementOptionsResponse data, response status code and response headers
    def list_placement_options_with_http_info(inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_placement_options ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_placement_options"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListPlacementOptionsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_placement_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param marketplace_id The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
    # @param mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.
    # @param [Hash] opts the optional parameters
    # @return [ListPrepDetailsResponse]
    def list_prep_details(marketplace_id, mskus, opts = {})
      data, _status_code, _headers = list_prep_details_with_http_info(marketplace_id, mskus, opts)
      data
    end

    # Get preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param marketplace_id The marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
    # @param mskus A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListPrepDetailsResponse, Integer, Hash)>] ListPrepDetailsResponse data, response status code and response headers
    def list_prep_details_with_http_info(marketplace_id, mskus, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_prep_details ...'
      end
      # verify the required parameter 'marketplace_id' is set
      if @api_client.config.client_side_validation && marketplace_id.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_id' when calling FbaInboundApi.list_prep_details"
      end
      # verify the required parameter 'mskus' is set
      if @api_client.config.client_side_validation && mskus.nil?
        fail ArgumentError, "Missing the required parameter 'mskus' when calling FbaInboundApi.list_prep_details"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/items/prepDetails'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceId'] = marketplace_id
      query_params[:'mskus'] = @api_client.build_collection_param(mskus, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListPrepDetailsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_prep_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of boxes to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListShipmentBoxesResponse]
    def list_shipment_boxes(inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = list_shipment_boxes_with_http_info(inbound_plan_id, shipment_id, opts)
      data
    end

    # Provides a paginated list of box packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of boxes to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListShipmentBoxesResponse, Integer, Hash)>] ListShipmentBoxesResponse data, response status code and response headers
    def list_shipment_boxes_with_http_info(inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_shipment_boxes ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_shipment_boxes"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.list_shipment_boxes"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListShipmentBoxesResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_shipment_boxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of content update previews to return. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListShipmentContentUpdatePreviewsResponse]
    def list_shipment_content_update_previews(inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = list_shipment_content_update_previews_with_http_info(inbound_plan_id, shipment_id, opts)
      data
    end

    # Retrieve a paginated list of shipment content update previews for a given shipment. The shipment content update preview is a summary of the requested shipment content changes along with the transportation cost implications of the change that can only be confirmed prior to the expiry date specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of content update previews to return.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListShipmentContentUpdatePreviewsResponse, Integer, Hash)>] ListShipmentContentUpdatePreviewsResponse data, response status code and response headers
    def list_shipment_content_update_previews_with_http_info(inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_shipment_content_update_previews ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_shipment_content_update_previews"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.list_shipment_content_update_previews"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListShipmentContentUpdatePreviewsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_shipment_content_update_previews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of items to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListShipmentItemsResponse]
    def list_shipment_items(inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = list_shipment_items_with_http_info(inbound_plan_id, shipment_id, opts)
      data
    end

    # Provides a paginated list of item packages in a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of items to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListShipmentItemsResponse, Integer, Hash)>] ListShipmentItemsResponse data, response status code and response headers
    def list_shipment_items_with_http_info(inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_shipment_items ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_shipment_items"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.list_shipment_items"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListShipmentItemsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_shipment_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of pallets to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [ListShipmentPalletsResponse]
    def list_shipment_pallets(inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = list_shipment_pallets_with_http_info(inbound_plan_id, shipment_id, opts)
      data
    end

    # Provides a paginated list of pallet packages in a shipment. A palletized shipment will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of pallets to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @return [Array<(ListShipmentPalletsResponse, Integer, Hash)>] ListShipmentPalletsResponse data, response status code and response headers
    def list_shipment_pallets_with_http_info(inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_shipment_pallets ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_shipment_pallets"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.list_shipment_pallets"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/pallets'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListShipmentPalletsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_shipment_pallets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves all transportation options for a shipment. Transportation options must first be generated by the `generateTransportationOptions` operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of transportation options to return in the response matching the given query. (default to 10)
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @option opts [String] :placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
    # @option opts [String] :shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
    # @return [ListTransportationOptionsResponse]
    def list_transportation_options(inbound_plan_id, opts = {})
      data, _status_code, _headers = list_transportation_options_with_http_info(inbound_plan_id, opts)
      data
    end

    # Retrieves all transportation options for a shipment. Transportation options must first be generated by the &#x60;generateTransportationOptions&#x60; operation before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of transportation options to return in the response matching the given query.
    # @option opts [String] :pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
    # @option opts [String] :placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
    # @option opts [String] :shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified.
    # @return [Array<(ListTransportationOptionsResponse, Integer, Hash)>] ListTransportationOptionsResponse data, response status code and response headers
    def list_transportation_options_with_http_info(inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.list_transportation_options ...'
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.list_transportation_options"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'paginationToken'] = opts[:'pagination_token'] if !opts[:'pagination_token'].nil?
      query_params[:'placementOptionId'] = opts[:'placement_option_id'] if !opts[:'placement_option_id'].nil?
      query_params[:'shipmentId'] = opts[:'shipment_id'] if !opts[:'shipment_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListTransportationOptionsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#list_transportation_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Confirms or reschedules a self-ship appointment slot against a shipment. Only available in the following [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
    # @param body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param slot_id An identifier to a self-ship appointment slot.
    # @param [Hash] opts the optional parameters
    # @return [ScheduleSelfShipAppointmentResponse]
    def schedule_self_ship_appointment(body, inbound_plan_id, shipment_id, slot_id, opts = {})
      data, _status_code, _headers = schedule_self_ship_appointment_with_http_info(body, inbound_plan_id, shipment_id, slot_id, opts)
      data
    end

    # Confirms or reschedules a self-ship appointment slot against a shipment. Only available in the following [marketplaces](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids): MX, BR, EG, SA, AE, IN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). 
    # @param body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param slot_id An identifier to a self-ship appointment slot.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScheduleSelfShipAppointmentResponse, Integer, Hash)>] ScheduleSelfShipAppointmentResponse data, response status code and response headers
    def schedule_self_ship_appointment_with_http_info(body, inbound_plan_id, shipment_id, slot_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.schedule_self_ship_appointment ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.schedule_self_ship_appointment"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.schedule_self_ship_appointment"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.schedule_self_ship_appointment"
      end
      # verify the required parameter 'slot_id' is set
      if @api_client.config.client_side_validation && slot_id.nil?
        fail ArgumentError, "Missing the required parameter 'slot_id' when calling FbaInboundApi.schedule_self_ship_appointment"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/schedule'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s).sub('{' + 'slotId' + '}', slot_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ScheduleSelfShipAppointmentResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#schedule_self_ship_appointment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;setPackingInformation&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [SetPackingInformationResponse]
    def set_packing_information(body, inbound_plan_id, opts = {})
      data, _status_code, _headers = set_packing_information_with_http_info(body, inbound_plan_id, opts)
      data
    end

    # Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;setPackingInformation&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetPackingInformationResponse, Integer, Hash)>] SetPackingInformationResponse data, response status code and response headers
    def set_packing_information_with_http_info(body, inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.set_packing_information ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.set_packing_information"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.set_packing_information"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'SetPackingInformationResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#set_packing_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;setPrepDetails&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [SetPrepDetailsResponse]
    def set_prep_details(body, opts = {})
      data, _status_code, _headers = set_prep_details_with_http_info(body, opts)
      data
    end

    # Set the preparation details for a list of MSKUs in a specified marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;setPrepDetails&#x60;.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetPrepDetailsResponse, Integer, Hash)>] SetPrepDetailsResponse data, response status code and response headers
    def set_prep_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.set_prep_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.set_prep_details"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/items/prepDetails'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'SetPrepDetailsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#set_prep_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;updateInboundPlanName&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_inbound_plan_name(body, inbound_plan_id, opts = {})
      update_inbound_plan_name_with_http_info(body, inbound_plan_id, opts)
      nil
    end

    # Updates the name of an existing inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;updateInboundPlanName&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_inbound_plan_name_with_http_info(body, inbound_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.update_inbound_plan_name ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.update_inbound_plan_name"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.update_inbound_plan_name"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#update_inbound_plan_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;updateItemComplianceDetails&#x60;.
    # @param marketplace_id The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
    # @param [Hash] opts the optional parameters
    # @return [UpdateItemComplianceDetailsResponse]
    def update_item_compliance_details(body, marketplace_id, opts = {})
      data, _status_code, _headers = update_item_compliance_details_with_http_info(body, marketplace_id, opts)
      data
    end

    # Update compliance details for a list of MSKUs. The details provided here are only used for the India (IN - A21TJRUUN4KGV) marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 6 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;updateItemComplianceDetails&#x60;.
    # @param marketplace_id The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateItemComplianceDetailsResponse, Integer, Hash)>] UpdateItemComplianceDetailsResponse data, response status code and response headers
    def update_item_compliance_details_with_http_info(body, marketplace_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.update_item_compliance_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.update_item_compliance_details"
      end
      # verify the required parameter 'marketplace_id' is set
      if @api_client.config.client_side_validation && marketplace_id.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_id' when calling FbaInboundApi.update_item_compliance_details"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/items/compliance'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'marketplaceId'] = marketplace_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'UpdateItemComplianceDetailsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#update_item_compliance_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;updateShipmentName&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_shipment_name(body, inbound_plan_id, shipment_id, opts = {})
      update_shipment_name_with_http_info(body, inbound_plan_id, shipment_id, opts)
      nil
    end

    # Updates the name of an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;updateShipmentName&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_shipment_name_with_http_info(body, inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.update_shipment_name ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.update_shipment_name"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.update_shipment_name"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.update_shipment_name"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#update_shipment_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;updateShipmentSourceAddress&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [UpdateShipmentSourceAddressResponse]
    def update_shipment_source_address(body, inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = update_shipment_source_address_with_http_info(body, inbound_plan_id, shipment_id, opts)
      data
    end

    # Updates the source address of an existing shipment. The shipment source address can only be updated prior to the confirmation of the shipment carriers. As a result of the updated source address, existing transportation options will be invalidated and will need to be regenerated to capture the potential difference in transportation options and quotes due to the new source address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;updateShipmentSourceAddress&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateShipmentSourceAddressResponse, Integer, Hash)>] UpdateShipmentSourceAddressResponse data, response status code and response headers
    def update_shipment_source_address_with_http_info(body, inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.update_shipment_source_address ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.update_shipment_source_address"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.update_shipment_source_address"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.update_shipment_source_address"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'UpdateShipmentSourceAddressResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#update_shipment_source_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates a shipment's tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [UpdateShipmentTrackingDetailsResponse]
    def update_shipment_tracking_details(body, inbound_plan_id, shipment_id, opts = {})
      data, _status_code, _headers = update_shipment_tracking_details_with_http_info(body, inbound_plan_id, shipment_id, opts)
      data
    end

    # Updates a shipment&#x27;s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 2 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
    # @param body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
    # @param inbound_plan_id Identifier of an inbound plan.
    # @param shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateShipmentTrackingDetailsResponse, Integer, Hash)>] UpdateShipmentTrackingDetailsResponse data, response status code and response headers
    def update_shipment_tracking_details_with_http_info(body, inbound_plan_id, shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FbaInboundApi.update_shipment_tracking_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling FbaInboundApi.update_shipment_tracking_details"
      end
      # verify the required parameter 'inbound_plan_id' is set
      if @api_client.config.client_side_validation && inbound_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'inbound_plan_id' when calling FbaInboundApi.update_shipment_tracking_details"
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling FbaInboundApi.update_shipment_tracking_details"
      end
      # resource path
      local_var_path = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/trackingDetails'.sub('{' + 'inboundPlanId' + '}', inbound_plan_id.to_s).sub('{' + 'shipmentId' + '}', shipment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'UpdateShipmentTrackingDetailsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FbaInboundApi#update_shipment_tracking_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
